package tests

import (
	"encoding/json"
	"reflect"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/paribu/event-decoder/event"
)

func TestDecodeBytesMatrix(t *testing.T) {
	abiFile := "decode_bytes_matrix_abi.json"

	encodedEvent := &event.Event{
		Topics: []common.Hash{
			common.HexToHash("0x88190b8ca4680df66be6b9f39c7a998b51ae5811a725652c35d2c16d68230498"),
		},
		Data
	}

	expectedParameters := []MatrixParameter{{
		Type: "bytes[][]",
		Name: "newValue",
		Value: [][]string{
			{"1a", "2a"},
			{"3a", "4a"},
		},
	},
	}

	parameters, err := decodeEventWithABI(abiFile, encodedEvent)
	if err != nil {
		t.Error(err)
	}

	for i, decoded := range parameters {
		expected := expectedParameters[i]

		if expected.Name != decoded.Name {
			t.Errorf("expected name %s, got %s", expected.Name, decoded.Name)
		}
		if expected.Type != decoded.Type {
			t.Errorf("expected type %s, got %s", expected.Type, decoded.Type)
		}

		var decodedMatrix Matrix
		if err := json.Unmarshal([]byte(decoded.Value), &decodedMatrix); err != nil {
			t.Errorf("error decoding JSON: %v", err)
		}

		for i, row := range decodedMatrix.Values {
			for j := range row {
				decodedMatrix.Values[i][j], err = hexToASCII(decodedMatrix.Values[i][j])
				if err != nil {
					t.Error(err)
				}
			}
		}
		if !reflect.DeepEqual(expected.Value, decodedMatrix.Values) {
			t.Errorf("expected value %v, got %v", expected.Value, decodedMatrix.Values)
		}
	}

}
